import ast



class ImportEntry:
    def __init__(self, module: str, names: list[str] = [], importNameSpace = False) -> None:
        self.module = module
        self.names = names
        self.importNameSpace = importNameSpace

    def _isSameModule(self, other):
        return self.module == other.module

    def __add__(self, other):
        return ImportEntry(self.module, self.names + other.names, self.importNameSpace or other.importNameSpace)
    
    def __str__(self) -> str:
        string = self.module + ("[+]" if self.importNameSpace else "") + ": "

        for entry in self.names:
            string += "\n\t" + entry

        return string

        

        


class ImportStructure:
    def __init__(self) -> None:
        self.structure: dict[str: ImportEntry] = {}

    def _isModuleInStructure(self, entry: ImportEntry):
        return entry.module in self.structure.keys()

    def addEntry(self, entry: ImportEntry):
        if self._isModuleInStructure(entry):
            self.structure[entry.module] += entry
        else:
            self.structure[entry.module] = entry

    def addEntries(self, entries: list[ImportEntry]):
        for e in entries:
            self.addEntry(e)
    
    def getEntries(self):
        return self.structure.values()

    def toSource(self):
        string = ""

        for entry in self.structure.values():
            if entry.importNameSpace:
                string += f"import {entry.module}\n"
            
            if entry.names:
                string += f"from {entry.module} import "
                for name in entry.names:
                    string += name + ", "
                string = string[:-2] # removes last comma
                string += "\n"
                
        
        return string
    
    def __add__(self, other): 
        temp = ImportStructure()
        temp.addEntries(self.getEntries() + other.getEntries())
        return temp


    def __str__(self) -> str:
        string = ""

        for entry in self.structure.values():
            string += str(entry) + "\n"
        
        return string
    


def makeImportStructure(source: str) -> ImportStructure:
    """Returns the import structure of a Python source file"""

    tree = ast.parse(source)
    structure = ImportStructure()

    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            moduleName = list(map(lambda x: x.asname if x.asname else x.name, node.names)) # to be replaced by alias logic in ImportStructure class
            entries = [ImportEntry(n, importNameSpace=True) for n in moduleName]
            structure.addEntries(entries)

        if isinstance(node, ast.ImportFrom):
            moduleName = node.module
            objectNames = list(map(lambda x: x.asname if x.asname else x.name, node.names)) # to be replaced by alias logic in ImportStructure class
            entry = ImportEntry(moduleName, objectNames)        
            structure.addEntry(entry)
    
    return structure

def getTestFileName(fileName, pattern):
    len = len(fileName)
    result = fileName[0 : len - 1 - 3] # removes the .py suffix
    result += pattern
    result += ".py"
    return result


def split_generated_code(pbt):
    """Splits code generated by hypothesis into imports and the actual PBT"""
    
    tree = ast.parse(pbt)
    importNodes = []

    for node in ast.walk(tree):
        if isinstance(node, ast.Import) or isinstance(node, ast.ImportFrom):
            importNodes += [ast.unparse(node)]
            tree.body.remove(node)

    return (ast.unparse(tree), importNodes)


# Test expression
expr = """import ast
from math import pi


def dummyFunction():
    pass

def sortingAlgorithm(lst: list[int]) -> list[int]:
    return sorted(lst)

x = 10
y = 20

# Test comment

def dummyFunction2():
    pass
    """

expr2 = """import ast
from math import sqr

x = 10
y = 20"""

expr3 = """from ast import walk
import math

x = 50"""

x = makeImportStructure(expr)
y = makeImportStructure(expr2)
z = makeImportStructure(expr3)

print(x)
print("---")
x.addEntry(y.structure["math"])
print(x)
print("---")
x.addEntry(z.structure["ast"])
print(x)
print("---")
x.addEntry(ImportEntry("this"))
print(x)
print("---")
